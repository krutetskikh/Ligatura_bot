import os
import logging
import fitz  # PyMuPDF
import pandas as pd
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
expenses_by_thread = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="report"),
            InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export"),
        ],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É", callback_data="add_expense")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —É—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    thread_id = query.message.message_thread_id

    if query.data == "report":
        await report(update, context)
    elif query.data == "export":
        await export(update, context)
    elif query.data == "add_expense":
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`‚Äì—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ`

"
            "*–ü—Ä–∏–º–µ—Ä:*
"
            "`‚Äì1200 –∞—Ä–µ–Ω–¥–∞ —Ç–µ—Ö–Ω–∏–∫–∏`",
            parse_mode='Markdown',
            message_thread_id=thread_id
        )

# –ö–æ–º–∞–Ω–¥–∞ /report
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    thread_id = update.effective_message.message_thread_id
    if thread_id not in expenses_by_thread or not expenses_by_thread[thread_id]:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö.", message_thread_id=thread_id)
        return

    total = sum(exp[0] for exp in expenses_by_thread[thread_id])
    text = f"üìä –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É (—Ç–µ–º–∞ #{thread_id})\n\n"
    for amount, comment, dt in expenses_by_thread[thread_id]:
        text += f"‚Ä¢ {dt.strftime('%d.%m.%Y')} ‚Äî {amount:,.2f} ‚ÇΩ ‚Äî {comment}\n"
    text += f"\n–ò—Ç–æ–≥–æ: {total:,.2f} ‚ÇΩ"
    await update.message.reply_text(text, message_thread_id=thread_id)

# –ö–æ–º–∞–Ω–¥–∞ /export
async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    thread_id = update.effective_message.message_thread_id
    if thread_id not in expenses_by_thread or not expenses_by_thread[thread_id]:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", message_thread_id=thread_id)
        return

    df = pd.DataFrame(expenses_by_thread[thread_id], columns=["–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ", "–î–∞—Ç–∞"])
    filename = f"temp/report-thread-{thread_id}.xlsx"
    Path("temp").mkdir(exist_ok=True)
    df.to_excel(filename, index=False)

    with open(filename, "rb") as f:
        await update.message.reply_document(f, message_thread_id=thread_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_expense_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text
    thread_id = update.message.message_thread_id

    if not thread_id:
        return

    if message.startswith("-"):
        try:
            parts = message[1:].strip().split(" ", 1)
            amount = float(parts[0].replace("—Ç", "000").replace(",", "."))
            comment = parts[1] if len(parts) > 1 else ""
            expenses_by_thread.setdefault(thread_id, []).append((amount, comment, datetime.now()))
            await update.message.reply_text(
                f"üìå –£—á—Ç–µ–Ω–æ: {amount:.2f} ‚ÇΩ ‚Äî {comment}",
                message_thread_id=thread_id
            )
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è–ù–µ –ø–æ–Ω—è–ª —Ä–∞—Å—Ö–æ–¥: {e}", message_thread_id=thread_id)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("report", report))
    app.add_handler(CommandHandler("export", export))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_expense_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    app.run_polling()

if __name__ == "__main__":
    main()