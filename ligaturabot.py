
from telegram import Update, InputFile, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, CallbackQueryHandler, ContextTypes, filters
import fitz
import re
import os
import pandas as pd
from datetime import datetime
from collections import defaultdict

expenses_by_thread = defaultdict(list)

def extract_text_from_pdf(file_path):
    text = ""
    with fitz.open(file_path) as doc:
        for page in doc:
            text += page.get_text()
    return text

def extract_sum_with_fallback(text):
    lines = text.lower().splitlines()
    for line in lines:
        if any(word in line for word in ["—Å—É–º–º–∞", "–∏—Ç–æ–≥–æ", "–∫ –æ–ø–ª–∞—Ç–µ", "–Ω–∞ —Å—É–º–º—É"]):
            line = re.sub(r'(?<=\d)-(?=\d)', '.', line)
            numbers = re.findall(r'(\d[\d\s]*[.,]?\d{0,2})', line)
            for raw in numbers:
                cleaned = raw.replace(' ', '').replace(',', '.')
                try:
                    return float(cleaned)
                except:
                    continue
    match = re.search(r'(\d{2,6}-\d{2})', text)
    if match:
        return float(match.group(1).replace('-', '.'))
    return None

def classify_document(text):
    t = text.lower()
    if "–ø–ª–∞—Ç–µ–∂–Ω–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ" in t or "–ø–ª–∞—Ç—ë–∂–Ω–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ" in t:
        return "payment"
    elif "—Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É" in t or ("–∏–Ω–Ω" in t and "—É—Å–ª—É–≥–∏" in t):
        return "invoice"
    elif "—Ñ–Ω" in t or "–∏—Ç–æ–≥–æ" in t or "–∫–∫—Ç" in t:
        return "receipt"
    else:
        return "unknown"

def extract_description(text):
    lines = text.splitlines()
    key_lines = [
        line.strip() for line in lines
        if any(word in line.lower() for word in ["–æ–ø–ª–∞—Ç–∞", "—É—Å–ª—É–≥–∏", "–ø–æ —Å—á–µ—Ç—É", "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "–ø–æ—Å—Ç–∞–≤–∫–∞"])
        and len(line.strip()) > 20
    ]
    if key_lines:
        return max(key_lines, key=len)
    return ""

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == "private":
        keyboard = [["üìä –û—Ç—á–µ—Ç", "üìÅ –≠–∫—Å–ø–æ—Ä—Ç"], ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —É—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        keyboard = [[
            InlineKeyboardButton("üìä –û—Ç—á–µ—Ç", callback_data="report"),
            InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export"),
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É", callback_data="add_expense")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —É—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            message_thread_id=update.message.message_thread_id
        )

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    thread_id = update.message.message_thread_id or 0
    file = await context.bot.get_file(document.file_id)
    os.makedirs("temp", exist_ok=True)
    file_path = f"temp/{document.file_name}"
    await file.download_to_drive(file_path)

    if document.file_name.lower().endswith(".pdf"):
        text = extract_text_from_pdf(file_path)
        doc_type = classify_document(text)
        amount = extract_sum_with_fallback(text)
        description = extract_description(text)

        if doc_type in ["payment", "receipt"] and amount:
            expenses_by_thread[thread_id].append((amount, description or "—Ä–∞—Å—Ö–æ–¥", datetime.now()))
            await update.message.reply_text(
                f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ *{doc_type}*\n"
                f"üí∏ –°—É–º–º–∞: {amount:.2f} ‚ÇΩ\n"
                f"üìù –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {description or '‚Äî'}\n"
                f"üìä –£—á—Ç–µ–Ω–æ –≤ —Ç–µ–º–µ #{thread_id}",
                parse_mode='Markdown',
                message_thread_id=thread_id
            )
        else:
            await update.message.reply_text(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.\n"
                f"–¢–∏–ø: {doc_type}, —Å—É–º–º–∞: {amount}, –æ–ø–∏—Å–∞–Ω–∏–µ: {description or '‚Äî'}",
                message_thread_id=thread_id
            )

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    thread_id = update.message.message_thread_id or 0
    expenses = expenses_by_thread.get(thread_id, [])
    if not expenses:
        await update.message.reply_text("–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —ç—Ç–æ–π —Ç–µ–º–µ.", message_thread_id=thread_id)
        return
    total = sum(x[0] for x in expenses)
    lines = [f"{x[0]:,.2f} ‚ÇΩ ‚Äî {x[1]}" for x in expenses]
    """
    await update.message.reply_text(text, message_thread_id=thread_id)

async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    thread_id = update.message.message_thread_id or 0
    expenses = expenses_by_thread.get(thread_id, [])
    if not expenses or not isinstance(expenses[0], tuple):
        await update.message.reply_text("–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", message_thread_id=thread_id)
        return
    df = pd.DataFrame(expenses, columns=["–°—É–º–º–∞", "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ", "–î–∞—Ç–∞"])
    filename = f"report-thread-{thread_id}.xlsx"
    filepath = os.path.join("temp", filename)
    df.to_excel(filepath, index=False)
    with open(filepath, "rb") as f:
        await update.message.reply_document(
            document=InputFile(f, filename=filename),
            caption=f"üìÅ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —Ç–µ–º–µ #{thread_id}",
            message_thread_id=thread_id
        )

async def handle_expense_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text
    thread_id = update.message.message_thread_id or 0
    if message == "üìä –û—Ç—á–µ—Ç":
        await report(update, context)
        return
    elif message == "üìÅ –≠–∫—Å–ø–æ—Ä—Ç":
        await export(update, context)
        return
    elif message == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É":
    await update.message.reply_text(
        """–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
`-—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ`

–ü—Ä–∏–º–µ—Ä:
`-1200 –∞—Ä–µ–Ω–¥–∞ —Ç–µ—Ö–Ω–∏–∫–∏`""",
        parse_mode='Markdown'
    )
        return
    if message.startswith("-"):
        try:
            parts = message[1:].strip().split(" ", 1)
            amount = float(parts[0].replace("—Ç", "000").replace(",", "."))
            comment = parts[1] if len(parts) > 1 else ""
            expenses_by_thread[thread_id].append((amount, comment, datetime.now()))
            await update.message.reply_text(
                f"üí∏ –£—á—Ç–µ–Ω–æ: {amount:.2f} ‚ÇΩ ‚Äî {comment}",
                message_thread_id=thread_id
            )
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ –ø–æ–Ω—è–ª —Ä–∞—Å—Ö–æ–¥: {e}", message_thread_id=thread_id)


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    message = query.message
    thread_id = message.message_thread_id or 0

    if query.data == "report":
        expenses = expenses_by_thread.get(thread_id, [])
        if not expenses:
            await message.reply_text("–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —ç—Ç–æ–π —Ç–µ–º–µ.", message_thread_id=thread_id)
            return
        total = sum(x[0] for x in expenses)
        lines = [f"{x[0]:,.2f} ‚ÇΩ ‚Äî {x[1]}" for x in expenses]
        –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total:,.2f} ‚ÇΩ

" + "
".join(lines)
        """
text = f"""üìä –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É (—Ç–µ–º–∞ #{thread_id})\n–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total:,.2f} ‚ÇΩ\n\n{chr(10).join(lines)}"""
await message.reply_text(text, message_thread_id=thread_id)

    elif query.data == "export":
        expenses = expenses_by_thread.get(thread_id, [])
        if not expenses or not isinstance(expenses[0], tuple):
            await message.reply_text("–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", message_thread_id=thread_id)
            return
        df = pd.DataFrame(expenses, columns=["–°—É–º–º–∞", "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ", "–î–∞—Ç–∞"])
        filename = f"report-thread-{thread_id}.xlsx"
        filepath = os.path.join("temp", filename)
        df.to_excel(filepath, index=False)
        with open(filepath, "rb") as f:
            await message.reply_document(
                document=InputFile(f, filename=filename),
                caption=f"üìÅ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —Ç–µ–º–µ #{thread_id}",
                message_thread_id=thread_id
            )

    elif query.data == "add_expense":
    await message.reply_text(
        """–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
`-—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ`

–ü—Ä–∏–º–µ—Ä:
`-1200 –∞—Ä–µ–Ω–¥–∞ —Ç–µ—Ö–Ω–∏–∫–∏`""",
        parse_mode='Markdown',
        message_thread_id=thread_id
    )

def main():
    app = ApplicationBuilder().token("8026620280:AAFWnFLucuTEwRyDZ8kucNuPuiOT8M0B03o").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("report", report))
    app.add_handler(CommandHandler("export", export))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.Document.PDF, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_expense_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    app.run_polling()

if __name__ == "__main__":
    main()
